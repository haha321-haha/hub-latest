#!/usr/bin/env node

/**
 * Phase 1 SEO Fixes - Technical SEO Implementation
 * Handles 301 redirects for duplicate pages and noindex for test pages
 */

const fs = require('fs');
const path = require('path');

class SEOFixer {
    constructor() {
        this.workspaceDir = process.cwd();
        this.nextConfigPath = path.join(this.workspaceDir, 'next.config.js');
        this.robotsPath = path.join(this.workspaceDir, 'public', 'robots.txt');
        this.changes = [];
    }

    async execute() {
        console.log('üöÄ Starting Phase 1 SEO Fixes...\n');
        
        try {
            // 1. ÂàõÂª∫robots.txtÊñá‰ª∂
            await this.createRobotsTxt();
            
            // 2. Êõ¥Êñ∞next.config.jsÊ∑ªÂä†ÈáçÂÆöÂêë
            await this.addRedirects();
            
            // 3. ‰∏∫ÊµãËØïÈ°µÈù¢Ê∑ªÂä†metaÊ†áÁ≠æ
            await this.addMetaTags();
            
            // 4. ÁîüÊàê‰øÆÂ§çÊä•Âëä
            await this.generateReport();
            
            console.log('‚úÖ Phase 1 SEO fixes completed successfully!');
            this.printSummary();
            
        } catch (error) {
            console.error('‚ùå Error during SEO fixes:', error.message);
            process.exit(1);
        }
    }

    async createRobotsTxt() {
        console.log('üìÑ Creating robots.txt...');
        
        const robotsContent = `# SEO‰ºòÂåñ - ÈòªÊ≠¢ÊêúÁ¥¢ÂºïÊìéÁ¥¢ÂºïÊµãËØïÂíåÂºÄÂèëÈ°µÈù¢
User-agent: *
Allow: /

# ÈòªÊ≠¢ÊµãËØïÈ°µÈù¢
Disallow: /test*
Disallow: /*/test*
Disallow: /dev*
Disallow: /*/dev*
Disallow: /staging*
Disallow: /*/staging*

# ÈòªÊ≠¢ÈáçÂ§çÂÜÖÂÆπ
Disallow: /*?*download=*
Disallow: /*?*test=*
Disallow: /*?*debug=*

# ÂÖÅËÆ∏ÈáçË¶ÅÈ°µÈù¢
Allow: /$
Allow: /zh$
Allow: /en$
Allow: /zh/health-guide$
Allow: /en/health-guide$
Allow: /zh/articles$
Allow: /en/articles$
Allow: /zh/downloads$
Allow: /en/downloads$
Allow: /zh/interactive-tools$
Allow: /en/interactive-tools$

# Sitemap
Sitemap: https://periodhub.health/sitemap.xml
`;

        const publicDir = path.join(this.workspaceDir, 'public');
        if (!fs.existsSync(publicDir)) {
            fs.mkdirSync(publicDir, { recursive: true });
        }

        fs.writeFileSync(this.robotsPath, robotsContent);
        this.changes.push({
            type: 'robots.txt',
            action: 'created',
            file: this.robotsPath,
            content: 'ÈòªÊ≠¢ÊµãËØïÂíåÈáçÂ§çÈ°µÈù¢Ë¢´Á¥¢Âºï'
        });
        console.log('‚úÖ robots.txt created');
    }

    async addRedirects() {
        console.log('üîÑ Adding 301 redirects...');
        
        // ÂÆö‰πâÈáçÂÆöÂêëËßÑÂàô
        const redirects = [
            // Â§ÑÁêÜÈáçÂ§ç‰∏ãËΩΩÈ°µÈù¢
            {
                source: '/downloads/download-1',
                destination: '/downloads',
                permanent: true
            },
            {
                source: '/downloads/download-2',
                destination: '/downloads',
                permanent: true
            },
            {
                source: '/downloads/download-3',
                destination: '/downloads',
                permanent: true
            },
            // ÈáçÂÆöÂêëÊµãËØïÈ°µÈù¢
            {
                source: '/test',
                destination: '/',
                permanent: true
            },
            {
                source: '/test/:path*',
                destination: '/',
                permanent: true
            },
            {
                source: '/dev',
                destination: '/',
                permanent: true
            },
            {
                source: '/dev/:path*',
                destination: '/',
                permanent: true
            },
            // ËßÑËåÉÂåñURL
            {
                source: '/index.html',
                destination: '/',
                permanent: true
            },
            {
                source: '/home',
                destination: '/',
                permanent: true
            }
        ];

        // ËØªÂèñÁé∞ÊúâÁöÑnext.config.js
        let nextConfigContent = fs.readFileSync(this.nextConfigPath, 'utf8');
        
        // Ê∑ªÂä†ÈáçÂÆöÂêëÈÖçÁΩÆ
        const redirectsConfig = `
  // üöÄ SEO‰ºòÂåñ - 301ÈáçÂÆöÂêëÈÖçÁΩÆ
  async redirects() {
    return [
      // Â§ÑÁêÜÈáçÂ§çÂÜÖÂÆπ
      {
        source: '/downloads/download-1',
        destination: '/downloads',
        permanent: true,
      },
      {
        source: '/downloads/download-2',
        destination: '/downloads',
        permanent: true,
      },
      {
        source: '/downloads/download-3',
        destination: '/downloads',
        permanent: true,
      },
      // ÈòªÊ≠¢ÊµãËØïÈ°µÈù¢Á¥¢Âºï
      {
        source: '/test',
        destination: '/',
        permanent: true,
      },
      {
        source: '/test/:path*',
        destination: '/',
        permanent: true,
      },
      {
        source: '/dev',
        destination: '/',
        permanent: true,
      },
      {
        source: '/dev/:path*',
        destination: '/',
        permanent: true,
      },
      // URLËßÑËåÉÂåñ
      {
        source: '/index.html',
        destination: '/',
        permanent: true,
      },
      {
        source: '/home',
        destination: '/',
        permanent: true,
      },
    ];
  },
`;

        // Âú®nextConfigÂØπË±°‰∏≠Ê∑ªÂä†ÈáçÂÆöÂêë
        const insertAfter = 'trailingSlash: false,';
        const insertIndex = nextConfigContent.indexOf(insertAfter) + insertAfter.length;
        
        const newConfigContent = 
            nextConfigContent.slice(0, insertIndex) + 
            '\n' + redirectsConfig + 
            nextConfigContent.slice(insertIndex);

        fs.writeFileSync(this.nextConfigPath, newConfigContent);
        
        this.changes.push({
            type: 'next.config.js',
            action: 'updated',
            file: this.nextConfigPath,
            content: 'Ê∑ªÂä†301ÈáçÂÆöÂêëÈÖçÁΩÆ'
        });
        console.log('‚úÖ Redirects added to next.config.js');
    }

    async addMetaTags() {
        console.log('üè∑Ô∏è Adding meta tags for test pages...');
        
        // ‰∏∫ÊµãËØïÈ°µÈù¢Ê∑ªÂä†noindexÊ†áÁ≠æ
        const testPages = [
            'app/test/page.tsx',
            'app/dev/page.tsx',
            'app/staging/page.tsx'
        ];

        testPages.forEach(pagePath => {
            const fullPath = path.join(this.workspaceDir, pagePath);
            if (fs.existsSync(fullPath)) {
                let content = fs.readFileSync(fullPath, 'utf8');
                
                // Ê∑ªÂä†noindex metaÊ†áÁ≠æ
                if (!content.includes('noindex')) {
                    const metaTag = `
  // SEO‰ºòÂåñ - ÈòªÊ≠¢ÊêúÁ¥¢ÂºïÊìéÁ¥¢Âºï
  export const metadata = {
    robots: {
      index: false,
      follow: false,
    },
  };
`;
                    
                    // Âú®Êñá‰ª∂È°∂ÈÉ®Ê∑ªÂä†
                    const newContent = content.replace(
                        /export default/,
                        metaTag + '\nexport default'
                    );
                    
                    fs.writeFileSync(fullPath, newContent);
                    
                    this.changes.push({
                        type: 'meta tags',
                        action: 'added',
                        file: fullPath,
                        content: 'Ê∑ªÂä†noindexÊ†áÁ≠æ'
                    });
                }
            }
        });
        
        console.log('‚úÖ Meta tags added to test pages');
    }

    async generateReport() {
        const report = {
            timestamp: new Date().toISOString(),
            phase: 'Phase 1 - Technical SEO Fixes',
            changes: this.changes,
            summary: {
                totalChanges: this.changes.length,
                robotsCreated: this.changes.filter(c => c.type === 'robots.txt').length,
                redirectsAdded: this.changes.filter(c => c.type === 'next.config.js').length,
                metaTagsAdded: this.changes.filter(c => c.type === 'meta tags').length
            }
        };

        const reportPath = path.join(this.workspaceDir, 'seo-phase1-report.json');
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        
        console.log(`üìä Report generated: ${reportPath}`);
    }

    printSummary() {
        console.log('\nüìã Phase 1 SEO Fixes Summary:');
        console.log('================================');
        this.changes.forEach(change => {
            console.log(`‚úÖ ${change.type}: ${change.action} - ${change.content}`);
        });
        console.log(`\nTotal changes: ${this.changes.length}`);
    }
}

// ÊâßË°åSEO‰øÆÂ§ç
if (require.main === module) {
    const fixer = new SEOFixer();
    fixer.execute().catch(console.error);
}

module.exports = SEOFixer;